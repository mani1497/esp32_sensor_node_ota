#include <Arduino.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <Update.h>
#include <ArduinoJson.h>
#include "version.h"   // auto-generated by CI: defines FIRMWARE_VERSION





// ==== Wi-Fi Config ====
const char *ssid     = "Airtel_NJ_NDMM";
const char *password = "9585431826@Nj";

// ==== OTA JSON URL (GitHub Pages or raw JSON) ====
//const char *ota_json_url = "https://<OWNER>.github.io/<REPO>/firmware.json";
const char  *ota_json_url = "https://github.com/mani1497/esp32_sensor_node_ota/blob/main/firmware/firmware.bin";


// ==== Globals ====
TaskHandle_t otaTaskHandle;
String latestVersion;
String firmwareURL;
String firmwareSHA;

// ---- WiFi connect ----
void connectWiFi() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected. IP: " + WiFi.localIP().toString());
}

// ---- Fetch firmware.json ----
bool fetchFirmwareInfo() {
  HTTPClient http;
  http.begin(ota_json_url);
  int code = http.GET();
  if (code != HTTP_CODE_OK) {
    Serial.printf("[OTA] HTTP GET failed, code=%d\n", code);
    return false;
  }
  String payload = http.getString();
  StaticJsonDocument<512> doc;
  DeserializationError err = deserializeJson(doc, payload);
  if (err) {
    Serial.println("[OTA] JSON parse failed!");
    return false;
  }
  latestVersion = doc["version"].as<String>();
  firmwareURL   = doc["url"].as<String>();
  firmwareSHA   = doc["sha256"].as<String>();
  return true;
}

// ---- SHA256 verify (placeholder, TODO: implement real) ----
bool verifySHA256(Stream &stream, const String &expected) {
  // For demo: skip real check, return true.
  // Replace with mbedtls_sha256() for production.
  return true;
}

// ---- Perform OTA update ----
bool performOTA(const String &url) {
  WiFiClientSecure client;
  client.setInsecure();  // TODO: replace with cert_pem in production
  HTTPClient http;
  http.begin(client, url);

  int code = http.GET();
  if (code != HTTP_CODE_OK) {
    Serial.printf("[OTA] Download failed, code=%d\n", code);
    return false;
  }

  int len = http.getSize();
  WiFiClient *stream = http.getStreamPtr();

  if (!Update.begin(len)) {
    Serial.println("[OTA] Not enough space for update!");
    return false;
  }

  size_t written = Update.writeStream(*stream);
  if (written != len) {
    Serial.printf("[OTA] Written %u / %u bytes\n", (unsigned)written, len);
    return false;
  }

  if (!Update.end()) {
    Serial.printf("[OTA] Error: %s\n", Update.errorString());
    return false;
  }

  if (!Update.isFinished()) {
    Serial.println("[OTA] Update not finished properly.");
    return false;
  }

  Serial.println("[OTA] Update successful, rebooting...");
  delay(1000);
  ESP.restart();
  return true;
}

// ---- OTA Task ----
void otaTask(void *param) {
  while (true) {
    if (WiFi.status() == WL_CONNECTED) {
      if (fetchFirmwareInfo()) {
        if (latestVersion != FIRMWARE_VERSION) {
          Serial.printf("[OTA] New version %s (current %s)\n",
                        latestVersion.c_str(), FIRMWARE_VERSION);
          performOTA(firmwareURL);
        } else {
          Serial.println("[OTA] Already on latest version.");
        }
      }
    }
    vTaskDelay(pdMS_TO_TICKS(60000)); // check every 60s
  }
}

// ---- Setup ----
void setup() {
  Serial.begin(115200);
  connectWiFi();

  Serial.printf("Current firmware version: %s\n", FIRMWARE_VERSION);

  // Start OTA FreeRTOS task
  xTaskCreatePinnedToCore(
    otaTask,
    "OTA Task",
    8192,
    NULL,
    1,
    &otaTaskHandle,
    1
  );
}

// ---- Loop ----
void loop() {
  // Your sensor/Modbus tasks run independently in other FreeRTOS tasks.
  vTaskDelay(pdMS_TO_TICKS(1000));
}
